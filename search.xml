<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>noteForDataBase</title>
    <url>/2021/03/30/noteForDataBase/</url>
    <content><![CDATA[<h1 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h1><h3 id="1-并"><a href="#1-并" class="headerlink" title="1.并"></a>1.并</h3><p>相同的合并成一列，不同的并起来</p>
<h3 id="2-减"><a href="#2-减" class="headerlink" title="2.减"></a>2.减</h3><p>以R为基准，选择S没有的元组。S中R中没有的不算。</p>
<h3 id="3-乘"><a href="#3-乘" class="headerlink" title="3.乘"></a>3.乘</h3><h3 id="4-除"><a href="#4-除" class="headerlink" title="4.除"></a>4.除</h3><p>R➗S是R中 ‘包含S在相同属性上投影关系集合’ 的属性</p>
<h3 id="5-连接"><a href="#5-连接" class="headerlink" title="5.连接"></a>5.连接</h3><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><ul>
<li>筛选</li>
</ul>
<p>只有连接符两边都有的元素才进表</p>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>连接符左边集合的元素都在，没有对应就是null</p>
<h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>连接符右边集合的元素都在，没有对应就是null</p>
<p><img src="/2021/03/30/noteForDataBase/image-20210316175150770.png" alt="image-20210316175150770" style="zoom:25%;"></p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>就是左右连接的并集</p>
<h4 id="Theta-连接"><a href="#Theta-连接" class="headerlink" title="$\Theta$连接"></a>$\Theta$连接</h4><p>$R ∞F_S = (R×S) where F$</p>
<h3 id="6-投影"><a href="#6-投影" class="headerlink" title="6.投影"></a>6.投影</h3><h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><p>双<strong>exist</strong>表示：</p>
<h4 id="朴素想法"><a href="#朴素想法" class="headerlink" title="朴素想法"></a>朴素想法</h4><p>一种自然的想法是：当一个人的所有技能包含需求的技能时，这个人被选中。试翻译为SQL，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> person</span><br><span class="line"><span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> person</span><br><span class="line"><span class="keyword">HAVING</span> PS.skill <span class="keyword">CONTAINS</span> SKill</span><br></pre></td></tr></table></figure>
<p>可惜这不是一段可以执行的SQL，因为目前SQL不支持集合层面的包含关系判定。</p>
<p>经过观察不难发现，当前SQL支持的所有真假判断（谓词）都定义在元组层面上，这迫使我们将PersonSkill中的person看作分散的个体，每个元组依次独立做出判断。然而，这作用在单个元组上的判断又必须考虑与其同名的其他元组，这让子查询的使用成为必然。最后，由于使某元组为真的谓词必定使其同名元组为真，需要加DISTINCT去重。</p>
<p>综合上述思考，调整SQL语句框架为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> person</span><br><span class="line"><span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS</span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>某关于PS.person的谓词(子查询)<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="实现减法"><a href="#实现减法" class="headerlink" title="实现减法"></a><strong>实现减法</strong></h4><p>我们现在要实现这样一个子查询，根据某人的姓名判断其技能是否满足需求。还是按照最自然的思路，判断某人的技能集是否包含需求集。</p>
<p><strong>取出某人技能集的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> skill</span><br><span class="line"><span class="keyword">FROM</span> PersonSkill</span><br><span class="line"><span class="keyword">WHERE</span> person <span class="operator">=</span> 某人</span><br></pre></td></tr></table></figure>
<p><strong>需求集</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT skill</span><br><span class="line">FROM Skill</span><br></pre></td></tr></table></figure>
<p>记技能集为A，需求集为B，$B ⊆ A$等价于<br>$ \forall x\in B\rightarrow x\in A$<br>翻译为SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Skill <span class="keyword">AS</span> S</span><br><span class="line">    <span class="keyword">WHERE</span> S.skill <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> skill <span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS</span><br><span class="line">        <span class="keyword">WHERE</span> PS.person <span class="operator">=</span> 某人</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>也可以看作对等价式$B − A = ∅ $的判断，其中NOT EXISTS判定空集，NOT IN实现集合差。</p>
<p>遗憾的是，NOT IN实现集合差只对单列表有效</p>
<p>等价的双EXISTS版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Skill <span class="keyword">AS</span> S</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS <span class="comment">-- 选A中对应S.skill的元组</span></span><br><span class="line">        <span class="keyword">WHERE</span> PS.person <span class="operator">=</span> 某人 <span class="keyword">AND</span>   <span class="comment">-- 某人的技能集A中的一个技能</span></span><br><span class="line">              PS.skill <span class="operator">=</span> S.skill    <span class="comment">-- 和需求集B中的一个技能相同</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="实现除法"><a href="#实现除法" class="headerlink" title="实现除法"></a>实现除法</h4><p>综合上述讨论，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> person</span><br><span class="line"><span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Skill <span class="keyword">AS</span> S    <span class="comment">-- WHERE</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> skill <span class="keyword">FROM</span> PersonSkill <span class="keyword">AS</span> PS2</span><br><span class="line">        <span class="keyword">WHERE</span> PS2.person <span class="operator">=</span> PS1.person <span class="keyword">AND</span></span><br><span class="line">              PS2.skill <span class="operator">=</span> S.skill</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="ER关系图"><a href="#ER关系图" class="headerlink" title="ER关系图"></a>ER关系图</h2><h2 id="ER向关系模型转化"><a href="#ER向关系模型转化" class="headerlink" title="ER向关系模型转化"></a>ER向关系模型转化</h2><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><h3 id="寻找表T中的函数依赖"><a href="#寻找表T中的函数依赖" class="headerlink" title="寻找表T中的函数依赖"></a>寻找表T中的函数依赖</h3><ol>
<li>先考虑单个元素决定单个元素</li>
<li>在考虑多个元素的情形</li>
</ol>
<h3 id="函数依赖集的闭包"><a href="#函数依赖集的闭包" class="headerlink" title="函数依赖集的闭包"></a>函数依赖集的闭包</h3><p>给定一个函数依赖集F，它能推导出的所有函数依赖集的集合称为F+</p>
<h3 id="函数依赖集的覆盖"><a href="#函数依赖集的覆盖" class="headerlink" title="函数依赖集的覆盖"></a>函数依赖集的覆盖</h3><p>有函数依赖集F，G，若G中的所有函数依赖都能通过F中的函数依赖计算得到，则称F覆盖G</p>
<p><em>若F覆盖G，同时G覆盖F，则G、F等价</em></p>
<h3 id="函数依赖集的（最小）覆盖"><a href="#函数依赖集的（最小）覆盖" class="headerlink" title="函数依赖集的（最小）覆盖"></a>函数依赖集的（最小）覆盖</h3><ul>
<li>没有冗余的函数依赖</li>
<li>每一个函数依赖的左边都没有多余的属性</li>
</ul>
<p><strong>算法</strong>：</p>
<ol>
<li>右边分解成单个属性</li>
<li>去除冗余<ul>
<li>去掉一个函数依赖</li>
<li>如果这个函数依赖左边的属性闭包没变，那么可以去除，否则不能去除</li>
<li><img src="/2021/03/30/noteForDataBase/03/30/noteForDataBase/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDk5NzIx,size_16,color_FFFFFF,t_70.png" class title="在这里插入图片描述"></li>
</ul>
</li>
<li>化简左边<ul>
<li>去掉一个函数依赖左边的一个属性</li>
<li>如果去掉这个属性前剩下的属性的属性闭包和去掉后一样，那么能去掉改属性</li>
<li><img src="/2021/03/30/noteForDataBase/03/30/noteForDataBase/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDk5NzIx,size_16,color_FFFFFF,t_70-20210516113927406.png" class title="在这里插入图片描述"></li>
</ul>
</li>
<li>合并<ul>
<li>每一列（函数依赖的左边相同）右边乘起来</li>
</ul>
</li>
</ol>
<h3 id="属性集的闭包"><a href="#属性集的闭包" class="headerlink" title="属性集的闭包"></a>属性集的闭包</h3><p>就是一个属性能函数决定的所有属性的集合</p>
<p><strong>算法</strong>：</p>
<p><img src="/2021/03/30/noteForDataBase/image-20210516111412024.png" alt="image-20210516111412024" style="zoom:50%;"></p>
<h2 id="无损连接"><a href="#无损连接" class="headerlink" title="无损连接"></a>无损连接</h2><h3 id="定理1（6-7-4）"><a href="#定理1（6-7-4）" class="headerlink" title="定理1（6.7.4）"></a>定理1（6.7.4）</h3><p>若$Head(T_1) \bigcap Head(T_2) \rightarrow Head(T_1)$或者</p>
<p>$Head(T_1) \bigcap Head(T_2) \rightarrow Head(T_2)$</p>
<p>则称T1、T2为T的一个无损分解</p>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="依赖保持"><a href="#依赖保持" class="headerlink" title="依赖保持"></a>依赖保持</h3><p>T上的一个关系F分解为$F<em>1,F_2…$若$F</em>+ ={F<em>1,F_2…}</em>+$则称这个分解有依赖保持性</p>
<h3 id="超键和键（主属性）"><a href="#超键和键（主属性）" class="headerlink" title="超键和键（主属性）"></a>超键和键（主属性）</h3><p><strong>发现候选键的算法</strong>（做n次）：</p>
<ul>
<li>令K=Head(T)</li>
<li>删除K中的一个元素A</li>
<li>如果$(K-A)_F^+$包含T中的所有元素</li>
<li>那么可以删去这个元素</li>
</ul>
<p>主属性就是 键的集合K中的单个属性</p>
<h3 id="BCNF范式"><a href="#BCNF范式" class="headerlink" title="BCNF范式"></a>BCNF范式</h3><p>判定1：</p>
<ul>
<li><p>若函数依赖集合T所有的函数决定都 满足 <strong>超键</strong>决定$\rightarrow$一个不在超键中的单一属性。</p>
<p>则称它满足BCNF</p>
</li>
</ul>
<p>判定2：</p>
<ul>
<li><p>如果对于任意的函数依赖集F中的依赖$X \rightarrow A$</p>
<p>X是R的超键</p>
<p>则R满足BCNF</p>
</li>
</ul>
<h3 id="3NF-第三范式"><a href="#3NF-第三范式" class="headerlink" title="3NF 第三范式"></a>3NF 第三范式</h3><p><strong><em>第一种判定方法：</em></strong></p>
<p>如果对于任意的函数依赖集F中的依赖$X \rightarrow A$</p>
<ul>
<li>X为R的超键</li>
<li>A为R的主属性</li>
</ul>
<p>满足上述任意一个条件，则称R满足3NF</p>
<p><strong><em>第二种判定方法：</em></strong></p>
<p>如果存在$X\rightarrow Y$，Y是单个非主属性，则X必为超键</p>
<p><em>也就是说</em>：在函数依赖集 中，如果单个非主属性一定由超键决定</p>
<p>确定候选键<br>        ↓<br>是否存在非主属性            Y<br>对主属性部分函数依赖   → 1NF<br>    N↓<br>非主属性是否            Y<br>传递依赖于候选键（非主属性是否函数依赖另一个非主属性）    → 2NF<br>    N↓<br>判断所有依赖项的       Y<br>左边是否全为候选键  →  BCNF<br>    N↓<br>3NF</p>
]]></content>
      <categories>
        <category>study</category>
        <category>sephomore</category>
        <category>dataBase</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>dataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>noteForSE2</title>
    <url>/2021/03/30/noteForSE2/</url>
    <content><![CDATA[<h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><h2 id="项目和项目管理"><a href="#项目和项目管理" class="headerlink" title="项目和项目管理"></a>项目和项目管理</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>在限定时间内；</li>
<li>在一定的成本内；</li>
<li>在要求的质量水平上；</li>
<li>高效使用资源；</li>
<li>获得客户认可。</li>
</ul>
<h3 id="过程和活动"><a href="#过程和活动" class="headerlink" title="过程和活动"></a>过程和活动</h3><p><strong>过程</strong>：项目启动、项目计划、项目执行、项目跟踪与控制和项目收尾</p>
<p><strong>活动</strong>：计划制定、团队管理、成本控制、质量保障、度量、过程管理、进度跟踪与控制、⻛险管理、配置管理</p>
<span id="more"></span>
<h2 id="软件质量保障"><a href="#软件质量保障" class="headerlink" title="软件质量保障"></a>软件质量保障</h2><p>活动：<strong>就是各种评审</strong></p>
<h3 id="质量模型"><a href="#质量模型" class="headerlink" title="质量模型"></a>质量模型</h3><p><strong>功能性、可靠性、易用性、效率、可维护性、和可移植性</strong></p>
<h3 id="评审"><a href="#评审" class="headerlink" title="评审"></a>评审</h3><ol>
<li>在规划阶段（Planning），制定审查计划，决定审查会议的次数，安排每次审查会议的时间、地点、参与人员、审查内容等等。</li>
<li>在总体部署阶段（Overview），向所有参与审查会议的人员描述待审查材料的内容、审查的目标以及一些假设，并分发文档。</li>
<li>在准备阶段（Preparation），审查人员各自独立执行检查任务。在检查的过程当中，他们可能会被要求使用检查清单、场景等检查方法。检查中发现的问题会被记录下来，以准备开会讨论或者提交给收集人员。</li>
<li>在审查会议阶段（Inspection Meeting），通过会议讨论，识别、确认、分类发现的错误。</li>
<li>在返工阶段（Rework），修改发现的缺陷。</li>
<li>在跟踪阶段（Follow-up），要确认所有发现的问题都得到了解决，所有的错误都得到了修正。</li>
</ol>
<h3 id="质量度量"><a href="#质量度量" class="headerlink" title="质量度量"></a>质量度量</h3><h4 id="测度"><a href="#测度" class="headerlink" title="测度"></a>测度</h4><p>是为了描述软件产品而提供的定量指标</p>
<ul>
<li>代码行数</li>
</ul>
<h4 id="测量"><a href="#测量" class="headerlink" title="测量"></a>测量</h4><p>进行测度的活动称为测量</p>
<h4 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h4><p>是软件产品 在特定属性上的量化测度程度</p>
<ul>
<li>基于所有对象的代码行测度可以建立平均代码行数、最大代码行数、最小代码行数</li>
</ul>
<h2 id="软件配置管理"><a href="#软件配置管理" class="headerlink" title="软件配置管理"></a>软件配置管理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>用技术的和管理的指导和监督方法，来标识和说明配置项的功能和物理特征，控制对这些特征的变更，记录和报告变更处理及其实现状态，并验证与规格需求的一致性</p>
<p><img src="/2021/03/30/noteForSE2/image-20210331201525819.png" alt="image-20210331201525819" style="zoom:50%;"></p>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>置于软件配置管理之下的软件配置的各种有关项目，包括：</p>
<ol>
<li>各类管理文档</li>
<li>评审记录与文档</li>
<li>软件文档</li>
<li>源码及其可执行码</li>
<li>运行所需的系统软件和支持软件</li>
<li>有关数据</li>
<li>……</li>
</ol>
<p><strong>基线：</strong>：已经经过正式评审的规格说明或产品，可以作为进一步开发的基础，并且只有通过正式的变更控制过程才</p>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><h4 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h4><ul>
<li><img src="/2021/03/30/noteForSE2/image-20210331194431566.png" alt="image-20210331194431566" style="zoom:33%;"></li>
</ul>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><ul>
<li><p>Lock-modify-unlock solution</p>
<p><img src="/2021/03/30/noteForSE2/image-20210331194509416.png" alt="image-20210331194509416" style="zoom:50%;"></p>
</li>
<li><p>Copy-modify-merge solution</p>
<p><img src="/2021/03/30/noteForSE2/image-20210331194538975.png" alt="image-20210331194538975" style="zoom:50%;"></p>
</li>
</ul>
<h3 id="变更控制的过程"><a href="#变更控制的过程" class="headerlink" title="变更控制的过程"></a>变更控制的过程</h3><p><img src="/2021/03/30/noteForSE2/image-20210331194728713.png" alt="image-20210331194728713" style="zoom:75%;"></p>
<h1 id="需求基础"><a href="#需求基础" class="headerlink" title="需求基础"></a>需求基础</h1><h2 id="需求基础-1"><a href="#需求基础-1" class="headerlink" title="需求基础"></a>需求基础</h2><h3 id="需求的层次"><a href="#需求的层次" class="headerlink" title="需求的层次"></a>需求的层次</h3><p><img src="/2021/03/30/noteForSE2/image-20210327182120172.png" alt="image-20210327182120172" style="zoom:33%;"></p>
<ol>
<li>业务需求<ul>
<li>系统建立的战略出发点，表现为高层次的目标，描述了组织为什么要开发系统</li>
</ul>
</li>
<li>用户需求<ul>
<li>执行实际工作的用户对系统所能完成的具体任务的期望，描述了系统能够帮助用户做些什么</li>
<li>例：系统应该允许客户经理添加、修改或者删除会员个人信息</li>
</ul>
</li>
<li>系统需求<ul>
<li>用户对系统行为的期望，每个系统级需求反映了一次外界与系统的交互行为，或者系统的一个实现细节</li>
<li>例：在接到客户经理的请求后，系统应改为客户经理提供所有会员的个人信息。</li>
</ul>
</li>
</ol>
<!--more-->
<h2 id="需求分类"><a href="#需求分类" class="headerlink" title="需求分类"></a>需求分类</h2><h3 id="需求图谱"><a href="#需求图谱" class="headerlink" title="需求图谱"></a>需求图谱</h3><p><img src="/2021/03/30/noteForSE2/image-20210327180145887.png" alt="image-20210327180145887" style="zoom:33%;"></p>
<h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p><img src="/2021/03/30/noteForSE2/image-20210327180943029.png" alt="image-20210327180943029" style="zoom:25%;"></p>
<h3 id="过程需求"><a href="#过程需求" class="headerlink" title="过程需求"></a>过程需求</h3><p><img src="/2021/03/30/noteForSE2/image-20210327180959902.png" alt="image-20210327180959902" style="zoom:33%;"></p>
<h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><h4 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h4><ol>
<li>功能需求<ul>
<li><img src="/2021/03/30/noteForSE2/image-20210327183120183.png" alt="image-20210327183120183" style="zoom:33%;"></li>
</ul>
</li>
<li>性能需求<ul>
<li>速度</li>
<li>容量</li>
<li>吞吐量</li>
<li>负载</li>
<li>实时性</li>
</ul>
</li>
<li>质量属性<ul>
<li>可靠性：上传下载时，如果网络故障，系统不能出现故障</li>
<li>可用性：系统的可用性要达到98%</li>
<li>安全性：收银员只能查看，不能修改、删除VIP顾客的信息</li>
<li>可维护性：如果要加新功能，要能够在2人月内完成</li>
<li>可移植性：服务器要能在1人月内从win7更换到solaris 10操作系统</li>
<li>易用性：使用系统1个月的收银员进行销售处理的效率要达到10件商品/分钟</li>
</ul>
</li>
<li>对外接口<ul>
<li><img src="/2021/03/30/noteForSE2/image-20210327181945032.png" alt="image-20210327181945032" style="zoom:33%;"></li>
</ul>
</li>
<li>约束<ul>
<li><img src="/2021/03/30/noteForSE2/image-20210327182006421.png" alt="image-20210327182006421" style="zoom:33%;"></li>
</ul>
</li>
<li>数据需求（非标准类型的软件需求类别，而是功能需求的补充）<ul>
<li><img src="/2021/03/30/noteForSE2/image-20210327182031139.png" alt="image-20210327182031139" style="zoom:50%;"></li>
</ul>
</li>
</ol>
<h1 id="软件体系结构基础"><a href="#软件体系结构基础" class="headerlink" title="软件体系结构基础"></a>软件体系结构基础</h1><h2 id="软件体系结构的发展"><a href="#软件体系结构的发展" class="headerlink" title="软件体系结构的发展"></a>软件体系结构的发展</h2><ol>
<li>1969年第一次提到软件体系结构</li>
</ol>
<h2 id="理解软件体系结构"><a href="#理解软件体系结构" class="headerlink" title="理解软件体系结构"></a>理解软件体系结构</h2><h3 id="概念和定义"><a href="#概念和定义" class="headerlink" title="概念和定义"></a>概念和定义</h3><p><strong>一个软件系统的体系结构规定了系统的计算部件和部件之间的交互</strong></p>
<p>Wiki：Software architecture is the realization of non-functional requirements, while software design is the realization of functional requirements.</p>
<p>要素：</p>
<ul>
<li>高层抽象</li>
<li>关注利益相关者</li>
<li>设计方案</li>
</ul>
<h3 id="区分物理与逻辑"><a href="#区分物理与逻辑" class="headerlink" title="区分物理与逻辑"></a>区分物理与逻辑</h3><ul>
<li>逻辑更高层</li>
<li>逻辑-抽象，物理-实现</li>
<li>逻辑意味着更高的视角</li>
</ul>
<h3 id="高层抽象"><a href="#高层抽象" class="headerlink" title="高层抽象"></a>高层抽象</h3><p><strong>好处：</strong></p>
<ul>
<li>直观，便于理解</li>
<li>验证正确性</li>
<li>关注度分离，降低复杂度</li>
</ul>
<p>部件、连接件、配置</p>
<p>连接件是一个与部件平等的单位</p>
<p>部件与连接件是比类、模块等软件单位更高层次的抽象</p>
<h4 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h4><p>在系统架构中封装处理和数据的元素被称为软件组件</p>
<p>组件通常提供特定于应用程序的服务</p>
<p><img src="/2021/03/30/noteForSE2/image-20210519104308387.png" alt="image-20210519104308387" style="zoom:33%;"></p>
<p>原始部件：可以直接被实现为相应的软件实现机制</p>
<p>复合部件：由更细粒度的部件和连接件组成,复合部件通过局部配置将其内部的部件和连接件连接起来,构成一个整体</p>
<h4 id="连接件"><a href="#连接件" class="headerlink" title="连接件"></a>连接件</h4><p><img src="/2021/03/30/noteForSE2/image-20210519104656145.png" alt="image-20210519104656145" style="zoom:33%;"></p>
<p>原是连接件：可以直接被实现为相应的软件实现机制</p>
<p>复合连接件：由更细粒度的部件和连接件组成,复合连接件通过局部配置将其内部的部件和连接件连接起来,构成一个整体</p>
<p><img src="/2021/03/30/noteForSE2/image-20210519104801011.png" alt="image-20210519104801011" style="zoom:50%;"></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="/2021/03/30/noteForSE2/image-20210519104941253.png" alt="image-20210519104941253" style="zoom:50%;"></p>
<h2 id="体系结构风格初步"><a href="#体系结构风格初步" class="headerlink" title="体系结构风格初步"></a>体系结构风格初步</h2><h3 id="Main-Program-and-Subroutine-Style-主程序-子程序风格"><a href="#Main-Program-and-Subroutine-Style-主程序-子程序风格" class="headerlink" title="Main Program and Subroutine Style 主程序/子程序风格"></a>Main Program and Subroutine Style 主程序/子程序风格</h3><p>部件：procedures , functions and module</p>
<p>连接件：calls between them</p>
<img src="/2021/03/30/noteForSE2/03/30/noteForSE2/image-20210519105531662.png" class title="image-20210519105531662">
<h4 id="设计决策与约束"><a href="#设计决策与约束" class="headerlink" title="设计决策与约束"></a>设计决策与约束</h4><ul>
<li>基于声明-使用(程序调用)关系建立连接件,以层次分解的方式建立系统部件, 共同组成层次结构。（构成方式）</li>
<li>每一个上层部件可以“使用”下层部件,但下层部件不能“使用”上层部件,即不允许逆方向调用（单向调用）</li>
<li>系统应该是单线程执行。主程序部件拥有最初的执行控制权,并在“使用”中将控制权转移给下层子程序（单线程）</li>
<li>子程序只能够通过上层转移来获得控制权,可以在执行中将控制权转交给下层的子子程序,并在自身执行完成之后必须将控制权还交给上层部件（控制单向传递）</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>功能分解</li>
<li>集中控制</li>
</ul>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><strong>优点</strong>：</p>
<ul>
<li>流程清晰，易于理解</li>
<li>强控制性</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>程序调用是一种强耦合的连接方式,非常依赖交互方的接口规格,这会使得系统难以修改和复用（强耦合，难修改、复用）</li>
<li>程序调用的连接方式限制了各部件之间的数据交互,可能会使得不同部件使用隐含的共享数据交流,产生不必要的公共耦合,进而破坏它的“正确性”控制能力。（有公共耦合，破坏“正确性”的控制力）</li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>主要用于能够将系统功能依层次分解为多个顺序执行步骤的系统。</p>
<p>一些使用结构化方法(自顶向下或自底向上)建立的软件系统也属于主程序/子程序⻛格。</p>
<h3 id="Object-Oriented-Style-面向对象风格"><a href="#Object-Oriented-Style-面向对象风格" class="headerlink" title="Object-Oriented Style 面向对象风格"></a>Object-Oriented Style 面向对象风格</h3><p>组件：object or module</p>
<p>连接件：function or invocations (methods).</p>
<h4 id="设计决策及约束"><a href="#设计决策及约束" class="headerlink" title="设计决策及约束"></a>设计决策及约束</h4><ul>
<li>依照对数据的使用情况,用信息内聚的标准,为系统建立对象部件。每个对象部件基于内部数据提供对外服务接口,并隐藏内部数据的表示。（构建方式）</li>
<li>基于方法调用(Method Invocation)机制建立连接件,将对象部件连接起来。（连接方式）</li>
<li>每个对象负责维护其自身数据的一致性与完整性,并以此为基础对外提供“正确”的服务</li>
<li>每个对象都是一个自治单位,不同对象之间是平级的,没有主次、从属、层次、分解等关系</li>
</ul>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ul>
<li>任务分解</li>
<li>（委托式）分散式控制</li>
</ul>
<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><strong>优点：</strong></p>
<ul>
<li>内部实现的可修改性</li>
<li>易开发、易理解、易复用的结构组织</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>接口的耦合性</li>
<li>标识(Identity)的耦合性</li>
<li>副作用：面向对象式⻛格借鉴了面向对象的思想,也引入了面向对象的副作用,因此更难实现程序的“正确性”。例如,如果 A 和B 都使用对象 C,那么 B 对 C 的修改可能会对 A 产生未预期的影响。再例如对象的重入(Reentry)问题:如果 A 的方法f()调用了 B 的方法 p(),而 p()又调用了 A 的另一方法 q(),那么就可能使得 q()失败,因为在 q()开始执行时,A 正处于 f()留下的执行现场,这个现场可能是数据不一致的。</li>
</ul>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>适用于那些能够基于数据信息分解和组织的软件系统,这些系统: </p>
<ul>
<li>主要问题是标识和保护相关的数据信息;</li>
<li>能够将数据信息和相关操作联系起来,进行封装</li>
</ul>
<h3 id="Layered-Style-层次风格"><a href="#Layered-Style-层次风格" class="headerlink" title="Layered Style 层次风格"></a>Layered Style 层次风格</h3><p>Components: typically collections of procedures or objects.</p>
<p>Connectors: typically procedure calls or methods invocations under restricted visibility</p>
<p><img src="/2021/03/30/noteForSE2/image-20210519112139007-20210519112202841.png" style="zoom:50%;"></p>
<h4 id="设计决策与约束-1"><a href="#设计决策与约束-1" class="headerlink" title="设计决策与约束"></a>设计决策与约束</h4><ul>
<li><strong>从最底层到最高层,部件的抽象层次逐渐提升</strong>。每个下层为邻接上层提供服务, 每个上层将邻接下层作为基础设施使用。也就是说,在程序调用机制中上层调用下层。</li>
<li>两个层次之间的连接要遵守特定的交互协议,该交互协议应该是成熟、稳定和标准化的。也就是说,<strong>只要遵守交互协议,不同部件实例之间是可以互相替换的</strong>。</li>
<li><strong>跨层次的连接是禁止的</strong>,不允许第 I 层直接调用 I+N(N&gt;1)层的服务</li>
<li><strong>逆向的连接是禁止的</strong>,不允许第 I 层调用第 J(J&lt;I)层的服务</li>
</ul>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><ul>
<li>关注点分离（每层逐次抽象）</li>
<li>层间接口使用固定协议（固定控制）</li>
</ul>
<h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><strong>优点：</strong></p>
<ul>
<li>设计机制清晰,易于理解。</li>
<li>支持并行开发。</li>
<li>更好的可复用性与内部可修改性。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>交互协议难以修改。</li>
<li>性能损失。</li>
<li>难以确定层次数量和粒度</li>
</ul>
<h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><p>分层⻛格适用于具备下列特性的系统:</p>
<ul>
<li>主要功能是能够在不同抽象层次上进行任务分解的复杂处理;</li>
<li>能够建立不同抽象层次之间的稳定交互协议;</li>
<li>没有很高的实时性能要求,能够容忍稍许的延迟;</li>
</ul>
<h3 id="Model-View-Controller-Style"><a href="#Model-View-Controller-Style" class="headerlink" title="Model-View-Controller Style"></a>Model-View-Controller Style</h3><p><img src="/2021/03/30/noteForSE2/image-20210519112512093.png" alt="image-20210519112512093" style="zoom:50%;"></p>
<p>Changes in their states are propagated to the view subsystems</p>
<p>The model subsystems are designed such that they do not depend on any view or controller subsystems</p>
<p><img src="/2021/03/30/noteForSE2/image-20210519112622551.png" alt="image-20210519112622551" style="zoom:50%;"></p>
<h4 id="设计决策和约束"><a href="#设计决策和约束" class="headerlink" title="设计决策和约束"></a>设计决策和约束</h4><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><p><strong>优点：</strong></p>
<ul>
<li>易开发性。视图和控制的可修改性</li>
<li>具有一定的可修改性优势</li>
<li>适宜于网络系统开发的特征</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>复杂性：MVC 将用户任务分解成了表现、控制和模型三个部分,这增加了系统的复杂性,不利于理解任务实现</li>
<li>模型修改困难</li>
</ul>
<h1 id="软件体系结构设计与构建"><a href="#软件体系结构设计与构建" class="headerlink" title="软件体系结构设计与构建"></a>软件体系结构设计与构建</h1>]]></content>
      <categories>
        <category>study</category>
        <category>sephomore</category>
        <category>SE2</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>SE2</tag>
      </tags>
  </entry>
  <entry>
    <title>这个小站开通啦</title>
    <url>/2021/03/21/%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%AB%99%E5%BC%80%E9%80%9A%E5%95%A6/</url>
    <content><![CDATA[<p>磨叽了一两年，最后终于弄了个自己的博客</p>
<p>以后可能会在这里放些学习资料，笔记</p>
<p>或者生活、摄影之类的东西（如果不懒的话）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
